/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MyCard {
        "userName": string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface SearchWorld {
        "searchText": string;
    }
}
export interface SearchWorldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSearchWorldElement;
}
declare global {
    interface HTMLMyCardElement extends Components.MyCard, HTMLStencilElement {
    }
    var HTMLMyCardElement: {
        prototype: HTMLMyCardElement;
        new (): HTMLMyCardElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLSearchWorldElementEventMap {
        "searchWorldNameSelected": string;
    }
    interface HTMLSearchWorldElement extends Components.SearchWorld, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSearchWorldElementEventMap>(type: K, listener: (this: HTMLSearchWorldElement, ev: SearchWorldCustomEvent<HTMLSearchWorldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSearchWorldElementEventMap>(type: K, listener: (this: HTMLSearchWorldElement, ev: SearchWorldCustomEvent<HTMLSearchWorldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSearchWorldElement: {
        prototype: HTMLSearchWorldElement;
        new (): HTMLSearchWorldElement;
    };
    interface HTMLElementTagNameMap {
        "my-card": HTMLMyCardElement;
        "my-component": HTMLMyComponentElement;
        "search-world": HTMLSearchWorldElement;
    }
}
declare namespace LocalJSX {
    interface MyCard {
        "userName"?: string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface SearchWorld {
        "onSearchWorldNameSelected"?: (event: SearchWorldCustomEvent<string>) => void;
        "searchText"?: string;
    }
    interface IntrinsicElements {
        "my-card": MyCard;
        "my-component": MyComponent;
        "search-world": SearchWorld;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-card": LocalJSX.MyCard & JSXBase.HTMLAttributes<HTMLMyCardElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "search-world": LocalJSX.SearchWorld & JSXBase.HTMLAttributes<HTMLSearchWorldElement>;
        }
    }
}
