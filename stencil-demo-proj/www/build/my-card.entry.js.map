{"file":"my-card.entry.esm.js","mappings":"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","names":[],"sources":["src/components/my-card/my-card.css?tag=my-card&encapsulation=shadow","src/components/my-card/my-card.tsx"],"sourcesContent":["/* .my-card-wrapper {\r\n    background-color: black;\r\n    color: white;\r\n    padding: 10px 10px;\r\n    margin: 10px;\r\n    text-align: center;\r\n    border: 2px dotted red;\r\n} */\r\n\r\n.my-card-wrapper {\r\n    width: 600px;\r\n    margin: 50px;\r\n    padding: 20px;\r\n    border-radius: 10%;\r\n    border: 3px solid #ccc;\r\n    display: inline-block;\r\n    font-family: \"system-ui\";\r\n}\r\n\r\n.card-custom {\r\n    width: 250px;\r\n    margin: 20px;\r\n    padding: 20px;\r\n    border-radius: 10%;\r\n    border: 2px solid rgb(102, 15, 15);\r\n}\r\n\r\nbutton {\r\n    border: none;\r\n    border-radius: 5px;\r\n    color: white;\r\n    padding: 15px 32px;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: black;\r\n    margin-right: 30px;\r\n}\r\n\r\n.btn-react {\r\n    background-color: rgb(100, 139, 246);\r\n}\r\n\r\n.my-input-textbox {\r\n    width: 100%;\r\n    padding: 12px 20px;\r\n    margin: 8px 0;\r\n    display: inline-block;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    box-sizing: border-box;\r\n}","import { Component, Listen, Prop, State, h } from \"@stencil/core/internal\";\r\n\r\n@Component({\r\n    tag: 'my-card',\r\n    styleUrl: 'my-card.css',\r\n    shadow: true\r\n})\r\nexport class MyCard {\r\n    @Prop({ mutable: true }) userName: string;\r\n    @State() APIData: string;\r\n    @State() showReactCard: boolean = false;\r\n    @State() showStencilCard: boolean = false;\r\n\r\n    @State() myStencilUsers: string;\r\n    @State() myReactUsers: string;\r\n\r\n    onUserInput(event: Event) {\r\n        event.preventDefault();\r\n        this.userName = (event.target as HTMLInputElement).value;\r\n    }\r\n\r\n\r\n    // connectedCallback() {\r\n    //     console.log('componentConnectedCallback');\r\n    // }\r\n    // disconnectedCallback() {\r\n    //     console.log('componentDisconnectedCallback');\r\n    // }\r\n    // componentWillLoad() {\r\n    //     // this method is called only once, it's a good place to load the data asynchronously\r\n    //     console.log('contentWillLoad component is about to be loaded');\r\n    // }\r\n    // componentWillRender() {\r\n    //     // It's always recommended to make any rendered state updates withing componentWillRender()\r\n\r\n    //     // this.APIData = 'updated in componentWillRender';\r\n    //     console.log('componentWillRender');\r\n    // }\r\n    // componentDidLoad() {\r\n    //     // called once just after the component is fully loaded and when first render() occurs.\r\n    //     console.log('componentDidLoad');\r\n    //     this.APIData = 'updated in componentDidLoad';\r\n    // }\r\n    // componentDidRender() {\r\n    //     console.log('componentDidRender');\r\n    // }\r\n    // componentShouldUpdate() {\r\n    //     // this hook is called when a component's Prop or State property changes\r\n    //     // and a re-render is about to be requested\r\n    //     console.log('componentShouldUpdate');\r\n    //     // return false; // If this returns false then no component should be updated and further hooks won't work\r\n    // }\r\n    // componentWillUpdate() {\r\n    //     console.log('componentWillUpdate');\r\n    //     console.log('This is being called since we are updating this.APIData in componentDidLoad');\r\n    // }\r\n\r\n\r\n    // @Watch('userName')\r\n    // watchHandler(newValue: string, oldValue: string) {\r\n    //     console.log(`The old value ${oldValue} and new value is ${newValue}`);\r\n\r\n    // }\r\n\r\n    // changeStates() {\r\n    //     this.userName = 'Changed-Stencil-Demo-Proj';\r\n    //     this.APIData = `We've got the data from API`;\r\n    //     // this.showCard = !this.showReactCard;\r\n    //     this.showReactCard = false;\r\n    //     alert(`this.showCard value : ${this.showReactCard}`);\r\n    // }\r\n\r\n    // componentWillUpdate() {\r\n    //     console.log('componentWillUpdate');\r\n    // }\r\n    // componentDidRender() {\r\n    //     console.log('componentDidRender');\r\n    // }\r\n\r\n    componentDidLoad() {\r\n        console.log('componentDidLoad');\r\n        this.APIData = 'loading...';\r\n        fetch('https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo')\r\n            .then(response => response.json())\r\n            .then(parsedRes => {\r\n                var metaDeta = parsedRes['Meta Data'];\r\n                var timeDateStencil = metaDeta['1. Information'];\r\n                this.APIData = timeDateStencil;\r\n                console.log(this.APIData);\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    getStencilUserFromAPI() {\r\n        this.myStencilUsers = 'loading data...';\r\n        fetch('https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo')\r\n            .then(res => {\r\n                return res.json();\r\n            })\r\n            .then(parsedRes => {\r\n                var timeSeries = parsedRes['Time Series (5min)'];\r\n                console.log(timeSeries);\r\n                var timeDateStencil = timeSeries['2024-06-25 19:50:00'];\r\n                // console.log(`Stencil timeSeries ${timeDateStencil}`);\r\n                this.myStencilUsers = timeDateStencil['5. volume'];\r\n            }).catch(ex => { console.log(ex) });\r\n\r\n    }\r\n\r\n    getReactUserFromAPI() {\r\n        this.myReactUsers = 'loading data...';\r\n        fetch('https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo')\r\n            .then(res => {\r\n                return res.json();\r\n            })\r\n            .then(parsedRes => {\r\n                var timeSeries = parsedRes['Time Series (5min)'];\r\n                console.log(timeSeries);\r\n                var timeDateReact = timeSeries['2024-06-25 19:55:00'];\r\n                // console.log(`React timeSeries ${timeDateReact}`);\r\n                this.myReactUsers = timeDateReact['5. volume'];\r\n            })\r\n            .catch(ex => { console.log(ex) });\r\n    }\r\n\r\n    fetchMyDataFromAPI(contentType: string) {\r\n        if (contentType == 'stencil') {\r\n            this.getStencilUserFromAPI();\r\n        } else {\r\n            this.getReactUserFromAPI();\r\n        }\r\n    }\r\n\r\n    onContentChange(content: string) {\r\n        if (content === 'reactcard') {\r\n            this.showReactCard = true;\r\n            this.showStencilCard = false;\r\n        } else if (content === 'stencilcard') {\r\n            this.showReactCard = false;\r\n            this.showStencilCard = true;\r\n        } else {\r\n            this.showReactCard = false;\r\n            this.showStencilCard = false;\r\n        }\r\n    }\r\n\r\n    @Listen('searchWorldNameSelected', { target: 'body' })\r\n    searchWorldNameSelected(event: CustomEvent<string>) {\r\n        console.log(event.detail);\r\n        this.userName = event.detail;\r\n    }\r\n\r\n    render() {\r\n        // setTimeout(() => {\r\n        //     this.changeStates();\r\n        // }, 2000);\r\n        let reactContent = (\r\n            <div>\r\n                <div class=\"card-custom\" id=\"react-div\">\r\n                    {/* Hello, from React <br></br> Live Users <span>{ }</span> */}\r\n                    {/* <button class=\"btn-react small-btn\">Get React Users</button> <br></br> */}\r\n                    Hello, from React <br></br> Live Users <span>{this.myReactUsers}</span>\r\n                    <button class=\"btn-react small-btn\" onClick={this.fetchMyDataFromAPI.bind(this, 'react')}>Get React Users</button> <br></br>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        let stencilContent = (\r\n            <div>\r\n                <div class=\"card-custom\" id=\"stencil-div\">\r\n                    Hello, from Stencil\r\n                    <br></br>\r\n                    {/* Live Users <span>{ }</span> */}\r\n                    {/* <button class=\"btn-stencil small-btn\" >Get Stencil Users</button> <br></br> */}\r\n                    Live Users <span>{this.myStencilUsers}</span>\r\n                    <button class=\"btn-stencil small-btn\" onClick={this.fetchMyDataFromAPI.bind(this, 'stencil')}>Get Stencil Users</button> <br></br>\r\n                    <br></br>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        // let contentToDisplay = '';\r\n        // if (this.showReactCard) {\r\n        //     contentToDisplay = reactContent;\r\n        // }\r\n\r\n        let contentToDisplay = '';\r\n        if (this.showReactCard) {\r\n            contentToDisplay = reactContent;\r\n        } else if (this.showStencilCard) {\r\n            contentToDisplay = stencilContent;\r\n        }\r\n\r\n        let mainContent = (\r\n            <div class=\"my-card-wrapper\">\r\n                <h1>Hi, I am {this.userName}</h1>\r\n                <h5>{this.APIData}</h5>\r\n\r\n                <button class=\"btn-stencil\" onClick={this.onContentChange.bind(this, 'stencilcard')}>Stencil</button>\r\n                <button class=\"btn-react\" onClick={this.onContentChange.bind(this, 'reactcard')}>React</button>\r\n\r\n                {/* {stencilContent} */}\r\n                {/* {reactContent} */}\r\n                {contentToDisplay}\r\n                <hr></hr>\r\n                <h3>Two way data-binding in stencil</h3>\r\n                <input type=\"text\" class=\"my-input-textbox\" onInput={this.onUserInput.bind(this)} value={this.userName} />\r\n            </div>\r\n        )\r\n        return mainContent;\r\n\r\n        // let mainContent = (\r\n        //     <div class=\"my-card-wrapper\">This is my Card</div>\r\n        // );\r\n        // return mainContent;\r\n\r\n        // return (\r\n        //     <div>\r\n        //         <div class=\"my-card-wrapper\">My Card</div>\r\n        //         <div class=\"my-card-wrapper\">My Card</div>\r\n        //     </div>\r\n        // );\r\n    }\r\n}"],"version":3}